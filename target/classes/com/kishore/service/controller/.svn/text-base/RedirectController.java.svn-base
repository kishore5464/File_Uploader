package com.fbt.talentex.jobseeker.service.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.fbt.talentex.jobseeker.exception.CustomGenericException;
import com.fbt.talentex.jobseeker.util.MailSenderService;

@Configuration
@PropertySource("classpath:/application_path.properties")
@Controller
public class RedirectController {

	@Autowired
	Environment environment;
	
	@Autowired
	MailSenderService mailSenderService;
		
	@RequestMapping(value = { "/userlanding" })
	public ModelAndView welcome(ModelAndView model, HttpSession session,
			@RequestParam("id") String jobseekerid) throws IOException{
		try
		{
		if (jobseekerid != null) {
			Integer jobseekerId = Integer.parseInt(jobseekerid);
			session.setAttribute("jobseekerid", jobseekerId);
			model = new ModelAndView("redirect:/");
		} else {
			model = new ModelAndView("redirect:/finaldirection");
		}
		return model;
}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}
	
	
	@RequestMapping(value = { "/portal" })
	public ModelAndView portal(ModelAndView model) {
		model = new ModelAndView("redirect:/finaldirection");
		return model;
	}
	
	@RequestMapping("/logout")
	public ModelAndView logout(HttpSession session, ModelAndView model, HttpServletRequest request) throws IOException {
		Integer portNumber = request.getServerPort();
		session.invalidate();
		if(portNumber != null)
		{
		    model = new ModelAndView("redirect:http://"+request.getServerName()+":"+portNumber+environment.getProperty("user.host.url")+"/re3t");
		}
		else
		{
			model = new ModelAndView("redirect:http://"+request.getServerName()+environment.getProperty("user.host.url")+"/re3t");
		}
		/*mailSenderService.logoutMail(""+session.getAttribute("emailid"));*/
		 return model;
		 
	}
	
	@RequestMapping("/re2t")
	public ModelAndView directs(HttpSession session, ModelAndView model, HttpServletRequest request) throws IOException {
		 session.invalidate();
		 Integer portNumber = request.getServerPort();
			if(portNumber != null)
			{
			    model = new ModelAndView("redirect:http://"+request.getServerName()+":"+portNumber+environment.getProperty("user.host.url")+"/re3t");
			}
			else
			{
				model = new ModelAndView("redirect:http://"+request.getServerName()+environment.getProperty("user.host.url")+"/re3t");
			}
			 return model;
	}
	
	@RequestMapping("/finaldirection")
	public ModelAndView direct(HttpSession session, ModelAndView model, HttpServletRequest request) throws IOException {
		try
		{
			Integer portNumber = request.getServerPort();
			if(portNumber != null)
			{
			    model = new ModelAndView("redirect:http://"+request.getServerName()+":"+portNumber+environment.getProperty("user.host.url")+"");
			}
			else
			{
				model = new ModelAndView("redirect:http://"+request.getServerName()+environment.getProperty("user.host.url")+"");
			}
		return model;
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}
	
	@RequestMapping(value = "/about")
	public ModelAndView about(ModelAndView model, HttpServletRequest request) {
		try
		{
			Integer portNumber = request.getServerPort();
			if(portNumber != null)
			{
			    model = new ModelAndView("redirect:http://"+request.getServerName()+":"+portNumber+environment.getProperty("user.host.url")+"/about");
			}
			else
			{
				model = new ModelAndView("redirect:http://"+request.getServerName()+environment.getProperty("user.host.url")+"/about");
			}
		return model;
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}

	@RequestMapping(value = "/contact")
	public ModelAndView contact(ModelAndView model, HttpServletRequest request) {
		try
		{
			Integer portNumber = request.getServerPort();
			if(portNumber != null)
			{
			    model = new ModelAndView("redirect:http://"+request.getServerName()+":"+portNumber+environment.getProperty("user.host.url")+"/contact");
			}
			else
			{
				model = new ModelAndView("redirect:http://"+request.getServerName()+environment.getProperty("user.host.url")+"/contact");
			}
		return model;
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}
	
	
	@RequestMapping("/takeassessment") // Normal Exam Redirection
	public void assessment(HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException {
		try
		{
		 Integer portNumber = request.getServerPort();
		 String returnPage;
			if(portNumber != null)
			{
				returnPage = "http://"+request.getServerName()+":"+portNumber+"/"+environment.getProperty("assessment.host.url")+"/";
			}
			else
			{
				returnPage = "http://"+request.getServerName()+"/"+environment.getProperty("assessment.host.url")+"/";
			}
			try {
				response.getWriter().println(returnPage);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}
	
	
	@RequestMapping("/takemodelassessment") // Model Exam Redirection
	public void modelAssessment(HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException {
		try
		{
		 
		 String courseId = request.getParameter("courseid");
		 String centerCode = request.getParameter("centercode");
		 String courseName = request.getParameter("coursename");
		 Integer uniqueId = (Integer) session.getAttribute("jobseekerid");
		 String examcount = request.getParameter("count");
		 String nickname = ""+session.getAttribute("nickname");
		 String email = ""+session.getAttribute("emailid");
		 Integer masterid = (Integer) session.getAttribute("masterid");
		 Integer portNumber = request.getServerPort();
		
		 String returnPage;
			if(portNumber != null)
			{
				returnPage = "http://"+request.getServerName()+":"+portNumber+"/"+environment.getProperty("assessment.host.url")+"/modelexam?id="+uniqueId+"&cid="+courseId+"&cname="+courseName+"&acode="+centerCode+"&count="+examcount+"&nickname="+nickname+"&email="+email+"&masterid="+masterid;
			}
			else
			{
				returnPage = "http://"+request.getServerName()+"/"+environment.getProperty("assessment.host.url")+"/modelexam?id="+uniqueId+"&cid="+courseId+"&cname="+courseName+"&acode="+centerCode+"&count="+examcount+"&nickname="+nickname+"&email="+email+"&masterid="+masterid;
			}
			try {
				response.getWriter().println(returnPage);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}
	
	@RequestMapping(value = "/backtodash",method=RequestMethod.GET)
	public ModelAndView backtoDashboard(ModelAndView model, HttpServletRequest request, HttpSession session, @RequestParam("id") Integer jobseekerID, @RequestParam("email") String email) {
		try
		{
			model = new ModelAndView("redirect:/dashboard");
			session.setAttribute("jobseekerid", jobseekerID);
			session.setAttribute("emailid", email);
			return model;
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
	}
	
	
	
}
