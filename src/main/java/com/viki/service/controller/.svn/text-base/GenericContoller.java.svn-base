package com.fbt.talentex.jobseeker.service.controller;

import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.velocity.app.VelocityEngine;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.stereotype.Controller;
import org.springframework.ui.velocity.VelocityEngineUtils;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.fbt.talentex.jobseeker.business.interfaces.GenericBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.ProfileBusiness;
import com.fbt.talentex.jobseeker.exception.CustomGenericException;
import com.fbt.talentex.jobseeker.service.pojo.UIPersonal;

@Controller
public class GenericContoller {
	
	@Autowired
	GenericBusiness genericBusiness;
	
	@Autowired
	ProfileBusiness profileBusiness;
	
	@Autowired
	VelocityEngine velocityEngine;
	
	@Autowired
	private JavaMailSender mailSender;
	
	@RequestMapping(value = "/mobiverify")
	public void verifyMobile(ModelAndView model, HttpSession session,
			HttpServletRequest request, HttpServletResponse moibiresp)
					throws IOException {
		try {
			String mobil = request.getParameter("mob");
			Integer verifyCode = genericBusiness.sentMobiCode((Integer) session.getAttribute("masterid"));
			//			String msg = "Your+Talentex+verification+code+is+" + verifyCode	+ "";
			String msg="Welcome+to+www.talentex.in+your+TalentEx+verfication+code+"+verifyCode+".+Contact+details:+info@talentex.in,+ph:044+-+31903195/64536373.";
			if (verifyCode != 0) {

				//				String url = "http://alotsolutions.in/API/WebSMS/Http/v1.0a/index.php?username=FOREBRAIN&password=ForeBrain@123&sender=TALENT&to="
				//						+ mobil + "&message=" + msg + "";

				//Working fine link
				//				http://bhashsms.com/api/sendmsg.php?user=forebrain&pass=123456&sender=TALENT&phone=7200019191&text=%22+msg+%22&priority=ndnd&stype=normal

				String url = "http://bhashsms.com/api/sendmsg.php?user=forebrain&pass=123456&sender=TALENT&phone=7200019191&text=%22+msg+%22&priority=ndnd&stype=normal";
				HttpClient client = new DefaultHttpClient();
				HttpGet requestget = new HttpGet("http://bhashsms.com/api/sendmsg.php?user=forebrain&pass=123456&sender=TALENT&phone="+mobil+"&text=Welcome+to+www.talentex.in+your+TalentEx+verfication+code+"+verifyCode+"&priority=ndnd&stype=normal");
				HttpResponse response = client.execute(requestget);
			} 
			else 
			{
				try {
					moibiresp.setContentType("text/plain");
					moibiresp.getWriter().println(verifyCode);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping({ "/verifysms" })
	public void verifysms(HttpServletRequest request, HttpSession session,
			HttpServletResponse response) {
		try {
			Integer masterid = (Integer) session.getAttribute("masterid");
			Integer jobseekerid = (Integer) session.getAttribute("jobseekerid");
			String result = genericBusiness.verifyMobiCode(
					request.getParameter("code"), masterid, jobseekerid);
			response.setContentType("text/plain"); 
			if (result.equals("success")) {
				String setStatus = "success"; 
				session.setAttribute("mobistatus", 1);
				try {
					response.getWriter().println(setStatus);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			} else if (result.equals("invalid")) {
				String setStatus = "invalid";
				try {
					response.getWriter().println(setStatus);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping({ "/verifymob" })
	public void verifymob(HttpServletRequest request, HttpSession session,
			HttpServletResponse response) {
		try {
			String mobile = request.getParameter("number");
			String result = genericBusiness.mobileVerfiy(mobile);
			response.setContentType("text/plain");
			if (result.equals("success")) {
				String setStatus = "success";
				try {
					response.getWriter().println(setStatus);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			} else if (result.equals("invalid")) {
				String setStatus = "invalid";
				try {
					response.getWriter().println(setStatus);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	
	@RequestMapping(value ="/profilecompleted")
	public void profileCompleteStatus(HttpSession session){
		UIPersonal uiPersonal=new UIPersonal();
		Integer jobseekerId=(Integer)session.getAttribute("jobseekerid");
		String result=profileBusiness.profileCompleteStatusUpdate(jobseekerId);
		if(result=="success"){
			uiPersonal.setFullprofilecomplete(1);
			session.setAttribute("fullprofile", "1");

		}else{

			uiPersonal.setFullprofilecomplete(0);
			session.setAttribute("fullprofile","0");

		}
	}
	
	@RequestMapping({ "/unsubscribe" })
	public ModelAndView unsubscribe(ModelAndView model,HttpServletRequest request, HttpSession session,HttpServletResponse response)
	{
		 model = new ModelAndView("unsubscribe");
		return model;
	}
	@RequestMapping({ "/unsubinfo" })
	public ModelAndView unsubinfo(ModelAndView model,HttpServletRequest request, HttpSession session,HttpServletResponse response)
	{
		 model = new ModelAndView("unsubscribe");
		 String unsubscribe=request.getParameter("unsubscribe");
		 String status=request.getParameter("status");
		 String udata=request.getParameter("udata");
		 String page=request.getParameter("page");
		return model;
	}
	
	
	@RequestMapping({ "/userstatus" })
	public void userstatus(HttpServletRequest request, HttpSession session,HttpServletResponse response)
	{
		Integer uniqueId = (Integer) session.getAttribute("jobseekerid");
		String status=request.getParameter("status");
		session.setAttribute("userstatus",status);
		profileBusiness.profileStatusUpdate(status, uniqueId);
	}

	@ExceptionHandler(CustomGenericException.class)
	public ModelAndView handleCustomException(CustomGenericException ex) 
	{
		ModelAndView model = new ModelAndView("generic_error");
		model.addObject("exception", ex);
		return model;
	}

	@ExceptionHandler(Exception.class)
	public ModelAndView handleAllException(Exception ex) 
	{
		ModelAndView model = new ModelAndView("exception_error");
		return model;
	}

	@RequestMapping(value ="/logoutmailsend")
	public void logoutMail(HttpSession session)
	{
		final String fromEmailAddress = "info@talentex.in";
		final String subject = "TalentEx-Thanks for visiting";
		final String toEmailAddress=(String) session.getAttribute("emailid");
		MimeMessagePreparator preparator = new MimeMessagePreparator() {
			public void prepare(MimeMessage mimeMessage) throws Exception {
				MimeMessageHelper message = new MimeMessageHelper(mimeMessage, true);
				message.setTo(toEmailAddress);
				message.setFrom(new InternetAddress(fromEmailAddress));
				message.setSubject(subject);
				Map<String, String> model = new HashMap<String, String>();
				model.put("toaddress", toEmailAddress);
				String body = VelocityEngineUtils.
						mergeTemplateIntoString(velocityEngine, "./templates/logoutmail.vm", "UTF-8", model);
				message.setText(body, true);
			}
		}; 
		this.mailSender.send(preparator);
	}
	
	@RequestMapping({ "/sendaccess" })
	public void SendAccessmail(HttpSession session, HttpServletRequest request)
			throws ParseException {
		try {
			
			Integer masterid = (Integer) session.getAttribute("masterid");
			String name = "" + session.getAttribute("nickname");
			String email = "" + session.getAttribute("emailid");
			if (masterid != 0) {
				genericBusiness.sendExamVerficationCode(email,masterid, name);
			}
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	
}
