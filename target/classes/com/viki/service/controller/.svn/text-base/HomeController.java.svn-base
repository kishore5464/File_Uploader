package com.fbt.talentex.jobseeker.service.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.fbt.talentex.jobseeker.business.interfaces.AnnouncementBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.CourseBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.ExamScheduleBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.GenericBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.InterviewBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.JobRoleBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.PointsBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.ProfileBusiness;
import com.fbt.talentex.jobseeker.business.interfaces.QualityPackBusiness;
import com.fbt.talentex.jobseeker.dao.entities.AuthorizedTestCenter;
import com.fbt.talentex.jobseeker.dao.entities.CityMaster;
import com.fbt.talentex.jobseeker.dao.entities.CollegeMaster;
import com.fbt.talentex.jobseeker.dao.entities.CourseMaster;
import com.fbt.talentex.jobseeker.dao.entities.DegreeMaster;
import com.fbt.talentex.jobseeker.dao.entities.DistrictMaster;
import com.fbt.talentex.jobseeker.dao.entities.IndustryMaster;
import com.fbt.talentex.jobseeker.dao.entities.LanguageMaster;
import com.fbt.talentex.jobseeker.exception.CustomGenericException;
import com.fbt.talentex.jobseeker.service.pojo.UIAddress;
import com.fbt.talentex.jobseeker.service.pojo.UIAnnouncement;
import com.fbt.talentex.jobseeker.service.pojo.UIDashboard;
import com.fbt.talentex.jobseeker.service.pojo.UIDiploma;
import com.fbt.talentex.jobseeker.service.pojo.UIExperience;
import com.fbt.talentex.jobseeker.service.pojo.UIHighSchool;
import com.fbt.talentex.jobseeker.service.pojo.UIInterview;
import com.fbt.talentex.jobseeker.service.pojo.UIJobRoles;
import com.fbt.talentex.jobseeker.service.pojo.UILangSkill;
import com.fbt.talentex.jobseeker.service.pojo.UIMycourses;
import com.fbt.talentex.jobseeker.service.pojo.UINonTechinalCourse;
import com.fbt.talentex.jobseeker.service.pojo.UIOurPointsRewards;
import com.fbt.talentex.jobseeker.service.pojo.UIPassword;
import com.fbt.talentex.jobseeker.service.pojo.UIPastExams;
import com.fbt.talentex.jobseeker.service.pojo.UIPersonal;
import com.fbt.talentex.jobseeker.service.pojo.UIPoints;
import com.fbt.talentex.jobseeker.service.pojo.UIPostGraduate;
import com.fbt.talentex.jobseeker.service.pojo.UIProjectSkill;
import com.fbt.talentex.jobseeker.service.pojo.UIRecommendedJobRole;
import com.fbt.talentex.jobseeker.service.pojo.UIScheduledExam;
import com.fbt.talentex.jobseeker.service.pojo.UISslcSchool;
import com.fbt.talentex.jobseeker.service.pojo.UITechSkill;
import com.fbt.talentex.jobseeker.service.pojo.UITechnicalCourse;
import com.fbt.talentex.jobseeker.service.pojo.UITechnology;
import com.fbt.talentex.jobseeker.service.pojo.UIUnderGraduate;
import com.fbt.talentex.jobseeker.service.pojo.UIWorkPreference;
import com.fbt.talentex.jobseeker.util.MailSenderService;

@Controller
public class HomeController {
	
	@Autowired
	GenericBusiness genericBusiness;
	@Autowired
	ProfileBusiness profileBusiness;
	@Autowired
	AnnouncementBusiness announcementBusiness;
	@Autowired
	JobRoleBusiness jobRoleBusiness;
	@Autowired
	InterviewBusiness interviewBusiness ;
	@Autowired
	CourseBusiness courseBusiness;
	@Autowired
	ExamScheduleBusiness examScheduleBusiness;
	@Autowired
	PointsBusiness pointsBusiness;
	@Autowired
	QualityPackBusiness qualityPackBusiness;
	
	@Autowired
	MailSenderService mailSenderService;
	
	@RequestMapping(value = { "/" })
	public ModelAndView welcomePage(ModelAndView model, HttpSession session, HttpServletRequest request)
			throws IOException {
		try {
			if (session.getAttribute("jobseekerid") != null) {
				
				 Integer jobseekerStatus = profileBusiness.getProfileInitialStatusCheck(Integer.parseInt(session.getAttribute("jobseekerid").toString()));
				 session.setAttribute("firstlogin","1");
				 session.setAttribute("loginmail","1");
					if(jobseekerStatus == 1)
					{
						session.setAttribute("activestatus", "1");
						model = new ModelAndView("redirect:/dashboard");
					}
					else
					{
						session.setAttribute("activestatus", "0");
						model = new ModelAndView("redirect:/education");
					}
				}
			else {
				model = new ModelAndView("redirect:/finaldirection");
			}
			return model;
		} catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(),
					ex.getMessage());
		}
	}

	@RequestMapping("/homeredirect")
	public ModelAndView homeredirect(HttpSession session, ModelAndView  model) throws IOException{
		try
		{
			if(session.getAttribute("activestatus") != null){
			Integer jobseekerStatus1= Integer.parseInt(""+ session.getAttribute("activestatus"));
			if(jobseekerStatus1 == 1)
			{
				model = new ModelAndView("redirect:/dashboard");
			}
			else
			{
				model = new ModelAndView("redirect:/personal");
			}
			}
			else{
				model = new ModelAndView("redirect:/finaldirection");
			}
		}
		catch (Exception ex) 
		{
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}
		return model;
	}
		
	
	@RequestMapping("/dashboard")
	public ModelAndView jobseekerDashBoard(HttpSession session, ModelAndView  model) throws IOException{
		try
		{
			session.setAttribute("addressredirect","10");
			if (session.getAttribute("jobseekerid") != null) {
			model = new ModelAndView("dashboard");
			 Integer jobseekerid = Integer.parseInt(""+session.getAttribute("jobseekerid"));
	          UIDashboard uiDashboard = this.profileBusiness.getJobseekerDashboardInfo(jobseekerid);
	    		model.addObject("message",
	    				uiDashboard.getAuthandication()
						+ "valid user");
				session.setAttribute("jobseekerid",
						uiDashboard.getUserUniqueid());
				session.setAttribute("masterid",
						uiDashboard.getUserMasterid());
				session.setAttribute("emailid",
						uiDashboard.getPemail());
				session.setAttribute("nickname",
						uiDashboard.getNickname());
				session.setAttribute("jobrole",
						uiDashboard.getJobrole());
				session.setAttribute("pincode",
						uiDashboard.getPincode());
				session.setAttribute("photo",
						uiDashboard.getImage_upload());
				session.setAttribute("technology",
						uiDashboard.getTechnology());
			/*	session.setAttribute("globalrank",
						uiDashboard.getGlobalRank());
				session.setAttribute("collegerank",
						uiDashboard.getCollegeRank());*/
				session.setAttribute("mobistatus",
						uiDashboard.getMobistatus());
				session.setAttribute("gender",
						uiDashboard.getGender());
				session.setAttribute("mobile",
						uiDashboard.getPcontact());
				session.setAttribute("userstatus",uiDashboard.getActiveStatus());
				session.setAttribute("mobstatus",uiDashboard.getRecheckActiveStatus());
				session.setAttribute("interviewcount",uiDashboard.getAcceptInterviewCount());
				session.setAttribute("announcecount",uiDashboard.getAnnouncementCount());
				
				List<UIPastExams> alrUiPastExams = examScheduleBusiness.getUserPastExamDetails(jobseekerid);
				Collections.reverse(alrUiPastExams);
	    model.addObject("examscorelist", alrUiPastExams);
	    model.addObject("dashboard", uiDashboard);
        model.addObject("placedcandidates", uiDashboard.getAlrUITestimonials());
    	List<UIAnnouncement> announcementMasters=announcementBusiness.getJobseekerAnnouncements(jobseekerid);
		model.addObject("listsize",announcementMasters.size());
		model.addObject("announcement", announcementMasters);
		UIPoints uiPoints = pointsBusiness.getJobseekerPointsDetails(jobseekerid);
		model.addObject("points", uiPoints);
		model.addObject("refhistory", uiPoints.getAlrUIReferralHistory());
		List<UIInterview> uiInterviews =interviewBusiness.getInterviewList(jobseekerid);
		model.addObject("interviews", uiInterviews);
		}else{
			model = new ModelAndView("redirect:/finaldirection");
		}
			
			 return model;
		}
		catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}

	}
	
	@RequestMapping("/cland")
	public String cland()
	{

		return "cregland";
	}

	@RequestMapping("/redeem")
	public String redeem(){

		return "redeem";
	}

	@RequestMapping("/info")
	public ModelAndView infomethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {

		model = new ModelAndView("info"); 

		List<CourseMaster> alrCourseMaster = genericBusiness
				.getCourses();
		model.addObject("course", alrCourseMaster);
		return model;

	}

	@RequestMapping(value = "/chkmail")
	public void myController(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		try {
			String data = request.getParameter("email");
			String type = request.getParameter("type");
			// 1-already find 0-new user
			Integer status = genericBusiness.checkExistUser(data);
			response.setContentType("text/plain");
			if (status.equals(1)) {
				String setStatus = "true";

				response.getWriter().println(setStatus);
			} else if (status.equals(0)) {
				String setStatus = "false";
				response.getWriter().println(setStatus);
			}
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/personal" })
	public ModelAndView jobseekerpersonals(ModelAndView model,HttpServletResponse response,HttpSession session,HttpServletRequest request)
					throws IOException {

		try {
			if (session.getAttribute("jobseekerid") != null) {
				UIPersonal jobSeekerInfo = this.profileBusiness.getJobseekerInfo(Integer.parseInt(""+session.getAttribute("jobseekerid")));
						model = new ModelAndView("personal");
						model.addObject("message",
								jobSeekerInfo.getAuthandication()
								+ "valid user");
						session.setAttribute("jobseekerid",
								jobSeekerInfo.getUserUniqueid());
						session.setAttribute("emailid",
								jobSeekerInfo.getPemail());
						session.setAttribute("masterid",
								jobSeekerInfo.getUserMasterid());
						session.setAttribute("emailid",
								jobSeekerInfo.getPemail());
						session.setAttribute("nickname",
								jobSeekerInfo.getNickname());
						session.setAttribute("jobrole",
								jobSeekerInfo.getJobrole());
						session.setAttribute("photo",
								jobSeekerInfo.getImage_upload());
						session.setAttribute("technology",
								jobSeekerInfo.getTechnology());
				/*		session.setAttribute("globalrank",
								jobSeekerInfo.getGlobalRank());
						session.setAttribute("collegerank",
								jobSeekerInfo.getCollegeRank());*/
						session.setAttribute("sslcper",
								jobSeekerInfo.getSslcPercentage());
						session.setAttribute("mobistatus",
								jobSeekerInfo.getMobistatus());
						session.setAttribute("emailstatus",
								jobSeekerInfo.getEmailstatus());
						session.setAttribute("pincode",
								jobSeekerInfo.getPincode());
						session.setAttribute("gender",
								jobSeekerInfo.getGender());
						session.setAttribute("mobile",
								jobSeekerInfo.getPcontact());
						session.setAttribute("userstatus",jobSeekerInfo.getActiveStatus());
                        session.setAttribute("mobstatus",jobSeekerInfo.getRecheckActiveStatus());
						session.setAttribute("fullprofile", jobSeekerInfo.getFullprofilecomplete());
                        session.setAttribute("announcecount",jobSeekerInfo.getAnnouncementCount());
                        session.setAttribute("interviewcount",jobSeekerInfo.getInterviewCount());
                        session.setAttribute("reftype", jobSeekerInfo.getReftype());
						if (jobSeekerInfo.getHscPercentage() == null) {

							session.setAttribute("hscper", "null");
						} else {
							session.setAttribute("hscper",
									jobSeekerInfo.getHscPercentage());
						}
						session.setAttribute("hscper",
								jobSeekerInfo.getHscPercentage());
						session.setAttribute("diplomaper",
								jobSeekerInfo.getDiplomaPercentage());
						session.setAttribute("ugper",
								jobSeekerInfo.getUgPercentage());
						session.setAttribute("pgper",
								jobSeekerInfo.getPgPercentage());
						model.addObject("jobseekerInfo", jobSeekerInfo);
					}else{
						model = new ModelAndView("redirect:/finaldirection");
					}
			return model;
		 }catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}



	}

	@RequestMapping({ "/address" })
	public ModelAndView address(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			model = new ModelAndView("address");
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			List<String> alrState = new ArrayList<String>();
			for (String state : mapCity.keySet()) {
				alrState.add(state.toUpperCase());
			}
			alrState.remove("SELECT YOUR CITY");
			Collections.sort(alrState);
			model.addObject("statelist", alrState);
			String firstState = alrState.get(0).toString().toLowerCase();
			List<CityMaster> alrCity = null;
			if (mapCity.containsKey(firstState)) {
				alrCity = mapCity.get(firstState);
			}
			model.addObject("ccitylist", alrCity);
			List<CityMaster> alrPCity = null;
			if (mapCity.containsKey(firstState)) {
				alrPCity = mapCity.get(firstState);
			}
			model.addObject("pcitylist", alrPCity);
			Map<String, List<DistrictMaster>> mapDistrict = genericBusiness
					.getDistrict();
			List<DistrictMaster> alrDistrict = null;
			if (mapDistrict.containsKey(firstState)) {
				alrDistrict = mapDistrict.get(firstState);
			}
			model.addObject("cdistlist", alrDistrict);
			List<DistrictMaster> alrPDistrict = null;
			if (mapDistrict.containsKey(firstState)) {
				alrPDistrict = mapDistrict.get(firstState);
			}
			model.addObject("pdistlist", alrPDistrict);
			UIAddress uiAddress = this.profileBusiness
					.getJobSeekerContact((Integer) session.getAttribute("jobseekerid"));
			session.setAttribute("nickname", uiAddress.getNickname());
			model.addObject("address", uiAddress);
			return model;
		} catch (Exception ex) {
			throw new CustomGenericException("" + ex.hashCode(), ex.getMessage());
		}

	}

	@RequestMapping({ "/editaddress" })
	public ModelAndView editaddress(HttpServletResponse response,
			HttpServletRequest request, HttpSession session, ModelAndView model)
					throws IOException {
		try {
			model = new ModelAndView("editaddress");
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			Map<String, List<DistrictMaster>> mapDistrict = genericBusiness
					.getDistrict();

			List<String> alrState = new ArrayList<String>();
			for (String state : mapCity.keySet()) {
				alrState.add(state.toUpperCase());
			}
			alrState.remove("SELECT YOUR CITY");
			Collections.sort(alrState);
			model.addObject("statelist", alrState);
			String editCState = request.getParameter("chkcstate").toString()
					.toLowerCase();
			String editPState = request.getParameter("chkpstate").toString()
					.toLowerCase();
			List<CityMaster> alrCity = null;
			if (mapCity.containsKey(editCState)) {
				alrCity = mapCity.get(editCState);
			}
			model.addObject("ccitylist", alrCity);
			List<CityMaster> alrPCity = null;
			if (mapCity.containsKey(editPState)) {
				alrPCity = mapCity.get(editPState);
			}
			model.addObject("pcitylist", alrPCity);

			List<DistrictMaster> alrDistrict = null;
			if (mapDistrict.containsKey(editCState)) {
				alrDistrict = mapDistrict.get(editCState);
			}
			model.addObject("cdistlist", alrDistrict);

			List<DistrictMaster> alrPDistrict = null;
			if (mapDistrict.containsKey(editPState)) {
				alrPDistrict = mapDistrict.get(editPState);
			}
			model.addObject("pdistlist", alrPDistrict);

			UIAddress uiAddress = this.profileBusiness
					.getJobSeekerContact((Integer) session.getAttribute("jobseekerid"));

			model.addObject("address", uiAddress);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/education" })
	public ModelAndView education(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			session.setAttribute("addressredirect","10");
			if (session.getAttribute("jobseekerid") != null) {
				UIPersonal jobSeekerInfo = this.profileBusiness.getJobseekerInfo(Integer.parseInt(""+session.getAttribute("jobseekerid") ));
						model = new ModelAndView("personal");
						model.addObject("message",
								jobSeekerInfo.getAuthandication()
								+ "valid user");
						session.setAttribute("jobseekerid",
								jobSeekerInfo.getUserUniqueid());
						session.setAttribute("emailid",
								jobSeekerInfo.getPemail());
						session.setAttribute("masterid",
								jobSeekerInfo.getUserMasterid());
						session.setAttribute("emailid",
								jobSeekerInfo.getPemail());
						session.setAttribute("nickname",
								jobSeekerInfo.getNickname());
						session.setAttribute("jobrole",
								jobSeekerInfo.getJobrole());
						session.setAttribute("photo",
								jobSeekerInfo.getImage_upload());
						session.setAttribute("technology",
								jobSeekerInfo.getTechnology());
				/*		session.setAttribute("globalrank",
								jobSeekerInfo.getGlobalRank());
						session.setAttribute("collegerank",
								jobSeekerInfo.getCollegeRank());*/
						session.setAttribute("sslcper",
								jobSeekerInfo.getSslcPercentage());
						session.setAttribute("mobistatus",
								jobSeekerInfo.getMobistatus());
						session.setAttribute("emailstatus",
								jobSeekerInfo.getEmailstatus());
						session.setAttribute("pincode",
								jobSeekerInfo.getPincode());
						session.setAttribute("gender",
								jobSeekerInfo.getGender());
						session.setAttribute("mobile",
								jobSeekerInfo.getPcontact());
						session.setAttribute("userstatus",jobSeekerInfo.getActiveStatus());
                        session.setAttribute("mobstatus",jobSeekerInfo.getRecheckActiveStatus());
						session.setAttribute("fullprofile", jobSeekerInfo.getFullprofilecomplete());
                        session.setAttribute("announcecount",jobSeekerInfo.getAnnouncementCount());
                        session.setAttribute("interviewcount",jobSeekerInfo.getInterviewCount());
                        session.setAttribute("reftype", jobSeekerInfo.getReftype());
						if (jobSeekerInfo.getHscPercentage() == null) {

							session.setAttribute("hscper", "null");
						} else {
							session.setAttribute("hscper",
									jobSeekerInfo.getHscPercentage());
						}
						session.setAttribute("hscper",
								jobSeekerInfo.getHscPercentage());
						session.setAttribute("diplomaper",
								jobSeekerInfo.getDiplomaPercentage());
						session.setAttribute("ugper",
								jobSeekerInfo.getUgPercentage());
						session.setAttribute("pgper",
								jobSeekerInfo.getPgPercentage());
			}
			model = new ModelAndView("education");

			UISslcSchool sslcSchool = this.profileBusiness
					.getJobSeekersSslcSchool((Integer) session
							.getAttribute("jobseekerid"));
			session.setAttribute("sslcper", sslcSchool.getMaggregate());
			session.setAttribute("sslcyoc", sslcSchool.getMyoc());
			session.setAttribute("pincode", sslcSchool.getPincode());

			model.addObject("sslc", sslcSchool);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/education1" })
	public ModelAndView education1(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			session.setAttribute("addressredirect","12");
			model = new ModelAndView("education1");

			UIHighSchool highSchool = this.profileBusiness
					.getJobSeekersHscSchool((Integer) session
							.getAttribute("jobseekerid"));
			session.setAttribute("hscper", highSchool.getHaggregate());
			session.setAttribute("sslcper", highSchool.getSslcPercentage());
			session.setAttribute("sslcyoc", highSchool.getSslcYoc());
			session.setAttribute("hscyoc", highSchool.getHyoc());
			model.addObject("hss", highSchool);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/diploma" })
	public ModelAndView education2(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			session.setAttribute("addressredirect","13");
			model = new ModelAndView("diploma");
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			List<String> alrState = new ArrayList<String>();
			for (String state : mapCity.keySet()) {
				alrState.add(state.toUpperCase());
			}
			alrState.remove("SELECT YOUR CITY");
			Collections.sort(alrState);
			model.addObject("statelist", alrState);
			UIDiploma diploma = this.profileBusiness
					.getJobSeekersDiplomaSchool((Integer) session
							.getAttribute("jobseekerid"));
			session.setAttribute("diplomaper", diploma.getDipaggregate());
			session.setAttribute("hscper", diploma.getHscPercentage());
			session.setAttribute("sslcyoc", diploma.getSslcYoc());
			session.setAttribute("dyoc", diploma.getDipyoc());
			model.addObject("diploma", diploma);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/ug" })
	public ModelAndView ugeducation(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			session.setAttribute("addressredirect","14");
			UIUnderGraduate underGraduate = this.profileBusiness
					.getJobSeekerUgDegree((Integer) session.getAttribute("jobseekerid"));
			session.setAttribute("ugper", underGraduate.getUgaggregate());
			session.setAttribute("ugyoc", underGraduate.getUgyoc());
			session.setAttribute("sslcyoc", underGraduate.getSslcYoc());
			session.setAttribute("diplomaper",
					underGraduate.getDiplomaPercentage());
			model.addObject("ug", underGraduate);

			//
			// List<String> alrUnivercity = new ArrayList<String>();
			// Set set = new HashSet(alrUnivercity);
			// alrUnivercity.clear();
			// alrUnivercity.addAll(set);
			// Collections.sort(alrUnivercity);
			// model.addObject("univlist", alrUnivercity);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/editug" })
	public ModelAndView editugeducation(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {

		/*
		 * UIDiploma diploma = this.profileBusiness
		 * .getJobSeekersDiplomaSchool((Integer) session .getAttribute("jobseekerid"));
		 * UIHighSchool highSchool = this.profileBusiness
		 * .getJobSeekersHscSchool((Integer) session.getAttribute("jobseekerid")); if
		 * ((diploma.getDipaggregate() != "0" && diploma.getDipaggregate() !=
		 * null) || (highSchool.getHaggregate() != "0" && highSchool
		 * .getHaggregate() != null)) { model = new ModelAndView("ug");
		 */
		try {
			UIUnderGraduate underGraduate = this.profileBusiness
					.getJobSeekerUgDegree((Integer) session.getAttribute("jobseekerid"));
			session.setAttribute("ugper", underGraduate.getUgaggregate());
			session.setAttribute("diplomaper",
					underGraduate.getDiplomaPercentage());
			session.setAttribute("ugyoc", underGraduate.getUgyoc());
			model.addObject("ug", underGraduate);
			List<DegreeMaster> alrDegree = genericBusiness.getDegrees();
			List<CollegeMaster> alrCollege = genericBusiness
					.getColleges();

			List<String> alrDegreeType = new ArrayList<String>();
			List<String> alrUnivercity = new ArrayList<String>();
			List<DegreeMaster> alrDegree2 = new ArrayList<DegreeMaster>();

			for (CollegeMaster college : alrCollege) {
				alrUnivercity.add(college.getUniversity().toUpperCase());
			}
			Set set = new HashSet(alrUnivercity);
			alrUnivercity.clear();
			alrUnivercity.addAll(set);
			alrUnivercity.remove("OTHERS");
			Collections.sort(alrUnivercity);
			model.addObject("univlist", alrUnivercity);
			alrCollege.remove(alrCollege.size()-1);
			alrCollege.remove(alrCollege.size()-1);
			model.addObject("collegelist", alrCollege);
			DegreeMaster degree = null;
			for (DegreeMaster degree1 : alrDegree) {
				if (degree1.getGraduation().equalsIgnoreCase("ug")) {
					alrDegreeType.add(degree1.getDegree().toUpperCase());
					degree = new DegreeMaster();
					degree.setDno(degree1.getDno());
					degree.setDepartment(degree1.getDepartment().toUpperCase());
					alrDegree2.add(degree);
				}
			}
			set.clear();
			set = new HashSet(alrDegreeType);
			alrDegreeType.clear();
			alrDegreeType.addAll(set);
			alrDegreeType.remove("NOT IN LIST");
			Collections.sort(alrDegreeType);
			model.addObject("degreelist", alrDegreeType);
			model.addObject("deplist", alrDegree2);

			/* } */

			/*
			 * else { model = new ModelAndView("education1");
			 * model.addObject("message", "please fill your schooling"); }
			 */
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/pg" })
	public ModelAndView pgeducation(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {

		try {
			session.setAttribute("addressredirect","16");
			UIPostGraduate postGraduate = this.profileBusiness
					.getJobSeekerPgDegree((Integer) session.getAttribute("jobseekerid"));
			session.setAttribute("sslcper", postGraduate.getSslcPercentage());
			session.setAttribute("hscper", postGraduate.getHscPercentage());
			session.setAttribute("diplomaper",
					postGraduate.getDiplomaPercentage());
			session.setAttribute("ugper", postGraduate.getUgPercentage());
			session.setAttribute("ugyoc", postGraduate.getUgYoc());
			session.setAttribute("pgper", postGraduate.getPgaggregate());
			model.addObject("pg", postGraduate);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/editpg" })
	public ModelAndView editpgeducation(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {

		try {
			UIPostGraduate postGraduate = this.profileBusiness
					.getJobSeekerPgDegree((Integer) session.getAttribute("jobseekerid"));
			session.setAttribute("sslcper", postGraduate.getSslcPercentage());
			session.setAttribute("hscper", postGraduate.getHscPercentage());
			session.setAttribute("diplomaper",
					postGraduate.getDiplomaPercentage());
			session.setAttribute("ugper", postGraduate.getUgPercentage());
			session.setAttribute("pgper", postGraduate.getPgaggregate());
			model.addObject("pg", postGraduate);

			List<DegreeMaster> alrDegree = genericBusiness.getDegrees();
			List<CollegeMaster> alrCollege = genericBusiness
					.getColleges();

			List<String> alrDegreeType = new ArrayList<String>();
			List<String> alrUnivercity = new ArrayList<String>();
			List<DegreeMaster> alrDegree2 = new ArrayList<DegreeMaster>();

			for (CollegeMaster college : alrCollege) {
				alrUnivercity.add(college.getUniversity().toUpperCase());
			}
			Set set = new HashSet(alrUnivercity);
			alrUnivercity.clear();
			alrUnivercity.addAll(set);
			alrUnivercity.remove("OTHERS");
			Collections.sort(alrUnivercity);
			model.addObject("univlist", alrUnivercity);
			alrCollege.remove(alrCollege.size()-1);
			alrCollege.remove(alrCollege.size()-1);
			model.addObject("collegelist", alrCollege);
			DegreeMaster degree = null;
			for (DegreeMaster degree1 : alrDegree) {
				if (degree1.getGraduation().equalsIgnoreCase("pg")) {
					alrDegreeType.add(degree1.getDegree().toUpperCase());
					degree = new DegreeMaster();
					degree.setDno(degree1.getDno());
					degree.setDepartment(degree1.getDepartment().toUpperCase());
					alrDegree2.add(degree);
				}
			}
			set.clear();
			set = new HashSet(alrDegreeType);
			alrDegreeType.clear();
			alrDegreeType.remove("NOT IN LIST");
			alrDegreeType.addAll(set);
			Collections.sort(alrDegreeType);
			model.addObject("degreelist", alrDegreeType);
			model.addObject("deplist", alrDegree2);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping({ "/preference" })
	public ModelAndView workpreference(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {

		try {
			model = new ModelAndView("preference");
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			List<String> alrState = new ArrayList<String>();
			for (String state : mapCity.keySet()) {
				alrState.add(state.toUpperCase());
			}
			alrState.remove("SELECT YOUR CITY");
			Collections.sort(alrState);
			model.addObject("workstate", alrState);

			String firstState = alrState.get(0).toString().toLowerCase();
			List<CityMaster> alrCity = null;
			if (mapCity.containsKey(firstState)) {
				alrCity = mapCity.get(firstState);
			}
			model.addObject("ccitylist", alrCity);
			
			List<IndustryMaster> alrIndustryMasters = profileBusiness.getAllIndustries();
			model.addObject("industry", alrIndustryMasters);
			
			UIWorkPreference uiWorkPreference = this.profileBusiness
					.getJobSeekerWorkPreference((Integer) session
							.getAttribute("jobseekerid"));

			model.addObject("workpref", uiWorkPreference);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/rlanding")
	public ModelAndView rland(HttpServletResponse response) throws IOException {
		return new ModelAndView("rlanding");
	}

	@RequestMapping("/password")
	public ModelAndView changePassword(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			model = new ModelAndView("password");
			UIPassword uiPassword = this.genericBusiness
					.getUserPassword((Integer) session.getAttribute("masterid"));
			model.addObject("password", uiPassword);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	/*
	 * @RequestMapping("/preference") public ModelAndView
	 * preference(HttpServletResponse response, ModelAndView model) throws
	 * IOException { try { model = new ModelAndView("preference"); Map<String,
	 * List<City>> mapCity = genericBusiness .getCity();
	 * List<String> alrState = new ArrayList<String>(); for (String state :
	 * mapCity.keySet()) { alrState.add(state.toUpperCase()); }
	 * alrState.remove("SELECT YOUR CITY"); Collections.sort(alrState);
	 * 
	 * model.addObject("statelist", alrState); return model; } catch (Exception
	 * e) { throw new CustomGenericException("" + e.hashCode(), e.getMessage());
	 * }
	 * 
	 * }
	 */
	@RequestMapping("/langskills")
	public ModelAndView langskills(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			List<UILangSkill> uiLangSkill = this.profileBusiness
					.getJobSeekerLanguage((Integer) session.getAttribute("jobseekerid"));
			List<LanguageMaster> langlist = genericBusiness
					.getLanguages();
			model = new ModelAndView("langskills");
			model.addObject("langskilllist", uiLangSkill);
			model.addObject("languagelist", langlist);

			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/techskills")
	public ModelAndView techskill(HttpServletResponse response,
			HttpSession session, ModelAndView model) throws IOException {
		try {
			model = new ModelAndView("techskills");
			List<CourseMaster> alrCourseMasters = genericBusiness
					.getCourses();
			List<UITechSkill> uiTechSkill = profileBusiness
					.getJobSeekerSkillset((Integer) session.getAttribute("jobseekerid"));

			model.addObject("techskilllist", uiTechSkill);
			model.addObject("courselist", alrCourseMasters);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping(value = "/proint")
	public ModelAndView jobseekerProjectSkill(ModelAndView model,
			HttpSession session, HttpServletResponse response)
					throws IOException {
		try {
			model = new ModelAndView("proint");
			List<UIProjectSkill> alrProjectSkills = profileBusiness
					.getJobSeekerProjectSkill((Integer) session
							.getAttribute("jobseekerid"));
			model.addObject("projectskill", alrProjectSkills);

			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}



	@RequestMapping("/experience")
	public ModelAndView experience(HttpServletResponse response,
			HttpServletRequest request, ModelAndView model, HttpSession session)
					throws IOException {
		try {
			List<UIExperience> experience = profileBusiness
					.getJobSeekerExperience((Integer) session
							.getAttribute("jobseekerid"));
			model = new ModelAndView("experience");
			model.addObject("experiencelist", experience);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}


	@RequestMapping("/landing")
	public ModelAndView landing(HttpServletResponse response)
			throws IOException {
		return new ModelAndView("landing");
	}

	

	@RequestMapping("/announcement")
	public ModelAndView announcement(HttpServletResponse response,HttpSession session)
			throws IOException 
	{
		ModelAndView model = new ModelAndView();
		model = new ModelAndView("announcement-landing");
		List<UIAnnouncement> announcementMasters=announcementBusiness.getJobseekerAnnouncements((Integer) session.getAttribute("jobseekerid"));
		model.addObject("listsize",announcementMasters.size());
		model.addObject("announcement", announcementMasters);
		return model;
	}
	@RequestMapping("/announceid")
	public void announceid(HttpServletResponse response,HttpSession session,HttpServletRequest request)
			throws IOException {
		session.setAttribute("announceid", request.getParameter("id"));
	}
	@RequestMapping("/interviewid")
	public void interviewid(HttpServletResponse response,HttpSession session,HttpServletRequest request)
			throws IOException {
		session.setAttribute("interviewid", request.getParameter("id"));
	}
	
	
	@RequestMapping("/announcement-detail")
	public ModelAndView announcedetails(HttpServletResponse response,HttpSession session,HttpServletRequest request)
			throws IOException {
		ModelAndView model = new ModelAndView();
		model = new ModelAndView("announcement-detail");
		Integer announceid = Integer.parseInt((String) session.getAttribute("announceid"));
		UIAnnouncement announcementMasters=announcementBusiness.getJobseekerAnnouncementById((Integer) session.getAttribute("jobseekerid"), announceid);
		model.addObject("announcedetail", announcementMasters); 
		session.setAttribute("addressredirect","0");
		return model;
	}
	@RequestMapping("/interview-detail")
	public ModelAndView interviewdetail(HttpServletResponse response,HttpSession session,HttpServletRequest request)
			throws IOException {
		ModelAndView model = new ModelAndView();
		model = new ModelAndView("interviewdetails");
		Integer interviewid = Integer.parseInt((String) session.getAttribute("interviewid"));
		List<UIInterview> uiInterviews =interviewBusiness.getInterviewList((Integer) session.getAttribute("jobseekerid"));
		model.addObject("announcement", uiInterviews);
		
		return model;
	}
	@RequestMapping("/workshop")
	public ModelAndView workshop(HttpServletResponse response)
			throws IOException {
		return new ModelAndView("workshop-landing");
	}

	@RequestMapping("/calletter")
	public ModelAndView calletter(HttpServletResponse response,HttpSession session)
			throws IOException {
		ModelAndView model = new ModelAndView();
		model = new ModelAndView("interviews");
		List<UIInterview> uiInterviews =interviewBusiness.getInterviewList((Integer) session.getAttribute("jobseekerid"));
		model.addObject("size",uiInterviews.size());
		model.addObject("announcement", uiInterviews);
		
		
		return model;
		
	}

	@RequestMapping("/points")
	public ModelAndView getPointsDetails(ModelAndView model, HttpServletResponse response,
			HttpSession session) throws IOException {
		try {
			model = new ModelAndView("points");
			UIPoints uiPoints = pointsBusiness.getJobseekerPointsDetails((Integer) session.getAttribute("jobseekerid"));
			model.addObject("points", uiPoints);
			model.addObject("refhistory", uiPoints.getAlrUIReferralHistory());
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	@RequestMapping("/rewardpoints")
	public ModelAndView rewardpoints(ModelAndView model, HttpServletResponse response,
			HttpSession session) throws IOException {
		try 
		{
			model = new ModelAndView("rewardpoints");
			UIPoints uiPoints = pointsBusiness.getJobseekerPointsDetails((Integer) session.getAttribute("jobseekerid"));
			model.addObject("points", uiPoints);
			List<UIOurPointsRewards> uiOurPointsRewards = pointsBusiness.getPointsRewardsDetails();
			model.addObject("pointsrewards", uiOurPointsRewards);
			return model;
		}
		catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	@RequestMapping("/rewardoffers")
	public ModelAndView rewardoffers(ModelAndView model, HttpServletResponse response,
			HttpSession session) throws IOException {
		try 
		{
			model = new ModelAndView("rewardoffers");
			UIPoints uiPoints = pointsBusiness.getJobseekerPointsDetails((Integer) session.getAttribute("jobseekerid"));
			model.addObject("points", uiPoints);

			return model;
		}
		catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	@RequestMapping("/referfriends")
	public ModelAndView referfriends(HttpServletRequest request,ModelAndView model, HttpServletResponse response,
			HttpSession session) throws IOException {
		try 
		{
			String jobseekerid=""+session.getAttribute("jobseekerid");
			String link="http://talentex.in/getsocial?refid="+jobseekerid+"";

			model = new ModelAndView("referfriends");
			UIPoints uiPoints = pointsBusiness.getJobseekerPointsDetails((Integer) session.getAttribute("jobseekerid"));
			model.addObject("points", uiPoints);
			model.addObject("reflink", link);
			return model;
		}
		catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	
	
	
	
/*	@RequestMapping("/ourpointsrewards")
	public ModelAndView getOurPointsRewards(ModelAndView model, HttpServletResponse response,
			HttpSession session) throws IOException {
		try {
			model = new ModelAndView("pointsrewards");
			List<UIOurPointsRewards> uiOurPointsRewards = jobseekerPointsInfo.getPointsRewardsDetails();
			model.addObject("pointsrewards", uiOurPointsRewards);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}*/
	
	@RequestMapping("/schedulex")
	public ModelAndView schedueleinterview(HttpServletResponse response,HttpSession session,ModelAndView model)
			throws IOException 
			{
				try
				{
					model = new ModelAndView("schedulex");
					List<AuthorizedTestCenter> authorizedTestCenters=genericBusiness.getAllAuthorizedCenters();
					model.addObject("centerlist", authorizedTestCenters);
					return model;
				}
				catch (Exception e) {
					throw new CustomGenericException("" + e.hashCode(), e.getMessage());
				}
			}
	
	@RequestMapping("/pastexam")
	public ModelAndView PastExams(ModelAndView model,
			HttpServletResponse response, HttpSession session)
					throws IOException {
		try {
			model = new ModelAndView("pastexam");
			List<UIPastExams> alrUiPastExams = examScheduleBusiness.getUserPastExamDetails((Integer) session
							.getAttribute("jobseekerid"));
			model.addObject("pastexamlist", alrUiPastExams);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping("/passedinterviews")
	public ModelAndView passedinterviews(HttpServletResponse response)
			throws IOException {
		return new ModelAndView("past");
	}

	@RequestMapping("/mycourse")
	public ModelAndView mycourse(ModelAndView model,
			HttpServletResponse response, HttpSession session)
					throws IOException {
		try {
			model = new ModelAndView("mycourse");
			List<UIMycourses> uiMycourses = courseBusiness
					.getTechnologyMycourses((Integer) session
							.getAttribute("jobseekerid"));
			model.addObject("mycourselist", uiMycourses);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping("/tech")
	public ModelAndView tech(ModelAndView model, HttpServletResponse response,
			HttpSession session) throws IOException {
		try {
			model = new ModelAndView("tech");
			List<UITechnicalCourse> uiTechnicalCourses = courseBusiness
					.getTechnicalCourses((Integer) session.getAttribute("jobseekerid"));
			if (!uiTechnicalCourses.isEmpty()) {
				session.setAttribute("jobrole", uiTechnicalCourses.get(0)
						.getJobrole());
				session.setAttribute("technology", uiTechnicalCourses.get(0)
						.getTechnology());
				/*session.setAttribute("globalrank", uiTechnicalCourses.get(0)
						.getGlobalRank());
				session.setAttribute("collegerank", uiTechnicalCourses.get(0)
						.getCollegeRank());*/
				model.addObject("techlist", uiTechnicalCourses);
			}
			
			return model;
			
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping({ "/nontech" })
	public ModelAndView nontech(ModelAndView model,
			HttpServletResponse response, HttpSession session)
					throws IOException {
		try {
			model = new ModelAndView("nontech");
			List<UINonTechinalCourse> uinonTechnicalCourses = courseBusiness
					.getNonTechinalCourses((Integer) session.getAttribute("jobseekerid"));
			if (!uinonTechnicalCourses.isEmpty()) {
				session.setAttribute("jobrole", uinonTechnicalCourses.get(0)
						.getJobrole());
				session.setAttribute("technology", uinonTechnicalCourses.get(0)
						.getTechnology());
			/*	session.setAttribute("globalrank", uinonTechnicalCourses.get(0)
						.getGlobalRank());
				session.setAttribute("collegerank", uinonTechnicalCourses
						.get(0).getCollegeRank());*/
				model.addObject("nontechlist", uinonTechnicalCourses);
			}
			

			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	


	@RequestMapping({ "/jobrolelanding" })
	public ModelAndView recommandedJobrolelanding(ModelAndView model,
			HttpServletResponse response, HttpSession session)
					throws IOException {
		try {
			session.setAttribute("addressredirect","16");
			model = new ModelAndView("jobrole-landing");
			List<UIRecommendedJobRole> alrRecommandedJobRole = jobRoleBusiness
					.getRecommandedJobRoles((Integer) session
							.getAttribute("jobseekerid"));
			model.addObject("recommandedlist", alrRecommandedJobRole);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping({ "/otherjobrole" })
	public ModelAndView jobrolelanding(ModelAndView model,
			HttpServletResponse response, HttpSession session)
					throws IOException {
		try {
			model = new ModelAndView("otherjobrole");
			List<UIJobRoles> alrJobRole = jobRoleBusiness
					.getJobRoles((Integer) session.getAttribute("jobseekerid"));
			model.addObject("alljobrolelist", alrJobRole);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}
	
	@RequestMapping({ "/schedulexams" })
	public ModelAndView schedulexams(HttpServletResponse response,HttpSession session,ModelAndView model)
			throws IOException {
		model = new ModelAndView("schedulexams");
		Integer jobseekerID=(Integer) session.getAttribute("jobseekerid");
		List<UIScheduledExam> list=examScheduleBusiness.examScheduleList(jobseekerID);
		model.addObject("scheduledlist",list);
		return model;
	}

	@RequestMapping({ "/recommended-technologies" })
	public ModelAndView jobroletechnology(ModelAndView model,
			HttpServletResponse response, HttpSession session,HttpServletRequest request)
					throws IOException {
		try {
			model = new ModelAndView("recommended-technologies");
			Integer roleid = Integer.parseInt(""+session.getAttribute("jobroleid"));
			List<UITechnology> alrTechnology = jobRoleBusiness
					.getRoleBasedTechnology((Integer) session.getAttribute("jobseekerid"),roleid);
			model.addObject("techlist", alrTechnology);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping({ "/recommendeddescription" })
	public ModelAndView jobroledescription(ModelAndView model,
			HttpSession session, HttpServletResponse response)
					throws IOException {
		try {
			model = new ModelAndView("recommendeddescription");
			List<UIRecommendedJobRole> alrRecommandedJobRole = jobRoleBusiness
					.getRecommandedJobRoles((Integer) session
							.getAttribute("jobseekerid"));
			model.addObject("recommandedlist", alrRecommandedJobRole);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping( value = "/rank" )
	public void getRank(HttpServletResponse response,HttpSession session,HttpServletRequest request)
			throws IOException 
	{
		try {
		Integer globalRank = 0;
		Integer percentile = 0;
		Integer jobseekerID=(Integer) session.getAttribute("jobseekerid");
		List<Integer> rankList = qualityPackBusiness.jobGlobalRank(jobseekerID);
		if(!rankList.isEmpty())
		{
			globalRank = rankList.get(0);
			percentile = rankList.get(1);
			session.setAttribute("globalrank", globalRank);
			session.setAttribute("collegerank", percentile);

		}
		try {
			response.setContentType("text/plain");
			response.getWriter().println(globalRank+"~"+percentile);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		catch(Exception e)
		{
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	
	}
	
	@RequestMapping({ "/faq" })
	public ModelAndView faq(HttpServletResponse response) throws IOException {
		return new ModelAndView("faq");
	}

	@RequestMapping({ "/about.htm" })
	public ModelAndView about(HttpServletResponse response) throws IOException {
		return new ModelAndView("about");
	}

	@RequestMapping({ "/index" })
	public ModelAndView index(ModelAndView model) throws IOException {
		try
		{
				 model = new ModelAndView("index");
				 return model;
		 
		}
		catch(Exception e)
		{
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	
	@RequestMapping("/assessment")
	public ModelAndView defaultExam(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request, HttpSession session) {

		model = new ModelAndView("assessment"); 
        Integer jobseekerid = Integer.parseInt(""+session.getAttribute("jobseekerid"));
		List<UIScheduledExam> alrUIScheduledExam = examScheduleBusiness.getAllExamDetails(jobseekerid);
		model.addObject("exams", alrUIScheduledExam);
		return model;

	}
	

	@RequestMapping({ "/allindustries" })
	public ModelAndView allindustries(HttpServletResponse response)
			throws IOException {
		return new ModelAndView("all-industries");
	}

	@RequestMapping({ "/industryjobrole" })
	public ModelAndView industryjobrole(HttpServletResponse response)
			throws IOException {
		return new ModelAndView("industry-jobrole");
	}


	@RequestMapping("/ccityServ")
	public ModelAndView ccitymethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String state = request.getParameter("value").toLowerCase();
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			List<CityMaster> alrCity = null;
			if (mapCity.containsKey(state)) {
				alrCity = mapCity.get(state);
			}
			model = new ModelAndView("address");
			model.addObject("ccitylist", alrCity);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping("/wpcityServ")
	public ModelAndView wpcitymethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {

		try {
			String state = request.getParameter("value").toLowerCase();
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			List<CityMaster> alrCity = null;
			if (mapCity.containsKey(state)) {
				alrCity = mapCity.get(state);

			}

			model = new ModelAndView("preference");
			model.addObject("ccitylist", alrCity);

			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}

	}

	@RequestMapping("/cdistServ")
	public ModelAndView cdistmethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String state = request.getParameter("value").toLowerCase();

			Map<String, List<DistrictMaster>> mapDistrict = genericBusiness
					.getDistrict();
			List<DistrictMaster> alrDistrict = null;
			if (mapDistrict.containsKey(state)) {
				alrDistrict = mapDistrict.get(state);
			}
			model = new ModelAndView("address");
			model.addObject("cdistlist", alrDistrict);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/pcityServ")
	public ModelAndView pcitymethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String state = request.getParameter("value").toLowerCase();
			Map<String, List<CityMaster>> mapCity = genericBusiness
					.getCity();
			List<CityMaster> alrCity = null;
			if (mapCity.containsKey(state)) {
				alrCity = mapCity.get(state);
			}
			model = new ModelAndView("address");
			model.addObject("pcitylist", alrCity);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/pdistServ")
	public ModelAndView pdistmethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String state = request.getParameter("value").toLowerCase();

			Map<String, List<DistrictMaster>> mapDistrict = genericBusiness
					.getDistrict();
			List<DistrictMaster> alrDistrict = null;
			if (mapDistrict.containsKey(state)) {
				alrDistrict = mapDistrict.get(state);
			}
			model = new ModelAndView("address");
			model.addObject("pdistlist", alrDistrict);
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/univServ")
	public ModelAndView univmethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String coursetype = request.getParameter("ctype");
			String type = request.getParameter("type");
			List<CollegeMaster> alrCollege = genericBusiness
					.getColleges();
			List<String> alrUnivercity = new ArrayList<String>();

			if (type.equals("ug")) {
				for (CollegeMaster college : alrCollege) {

					if (college.getType().equalsIgnoreCase(coursetype)) {


						alrUnivercity
						.add(college.getUniversity().toUpperCase());
					}

				}

				Set set = new HashSet(alrUnivercity);
				alrUnivercity.clear();
				alrUnivercity.addAll(set);
				alrUnivercity.remove("OTHERS");
				Collections.sort(alrUnivercity);

				model = new ModelAndView("ug");
				model.addObject("univlist", alrUnivercity);
			} else if (type.equals("pg")) {
				for (CollegeMaster college : alrCollege) {

					if (college.getType().equalsIgnoreCase(coursetype)) {
						alrUnivercity
						.add(college.getUniversity().toUpperCase());
					}
				}
				Set set = new HashSet(alrUnivercity);
				alrUnivercity.clear();
				alrUnivercity.addAll(set);
				alrUnivercity.remove("OTHERS");
				Collections.sort(alrUnivercity);
				model = new ModelAndView("pg");
				model.addObject("univlist", alrUnivercity);

			}
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/colServ")
	public ModelAndView colmethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String univ = request.getParameter("univ").toLowerCase();
			String type = request.getParameter("type");

			List<CollegeMaster> alrCollege = genericBusiness
					.getColleges();

			List<CollegeMaster> alrCollege2 = new ArrayList<CollegeMaster>();
			if (type.equals("ug")) {
				CollegeMaster college = null;

				for (CollegeMaster college1 : alrCollege) {
					if (college1.getUniversity().equalsIgnoreCase(univ)) {
						college = new CollegeMaster();
						college.setId(college1.getId());
						college.setName(college1.getName().toUpperCase());
						alrCollege2.add(college);
					}
				}

				Set set = new HashSet(alrCollege2);
				alrCollege2.clear();
				alrCollege2.addAll(set);
				model = new ModelAndView("ug");

				model.addObject("collegelist", alrCollege2);

			} else if (type.equals("pg")) {
				CollegeMaster college = null;
				for (CollegeMaster college1 : alrCollege) {
					if (college1.getUniversity().equalsIgnoreCase(univ)) {
						college = new CollegeMaster();
						college.setId(college1.getId());
						college.setName(college1.getName().toLowerCase());
						alrCollege2.add(college);
					}
				}
				Set set = new HashSet(alrCollege2);
				alrCollege2.clear();
				alrCollege2.addAll(set);

				model = new ModelAndView("pg");
				model.addObject("collegelist", alrCollege2);

			}
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/degServ")
	public ModelAndView degmethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String type = request.getParameter("type");
			List<DegreeMaster> alrDegree = genericBusiness.getDegrees();
			List<String> alrDegreeType = new ArrayList<String>();
			if (type.equals("ug")) {
				for (DegreeMaster degree : alrDegree) {
					if (degree.getGraduation().equalsIgnoreCase(type)) {
						alrDegreeType.add(degree.getDegree().toUpperCase());
					}
				}
				Set set = new HashSet(alrDegreeType);
				alrDegreeType.clear();
				alrDegreeType.addAll(set);
				alrDegreeType.remove("NOT IN LIST");
				Collections.sort(alrDegreeType);
				model = new ModelAndView("ug");
				model.addObject("degreelist", alrDegreeType);

			} else if (type.equals("pg")) {
				for (DegreeMaster degree : alrDegree) {
					if (degree.getGraduation().equalsIgnoreCase(type)) {
						alrDegreeType.add(degree.getDegree().toUpperCase());
					}
				}
				Set set = new HashSet(alrDegreeType);
				alrDegreeType.clear();
				alrDegreeType.addAll(set);
				alrDegreeType.remove("NOT IN LIST");
				Collections.sort(alrDegreeType);
				model = new ModelAndView("pg");
				model.addObject("degreelist", alrDegreeType);

			}
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}

	@RequestMapping("/depServ")
	public ModelAndView depmethod(HttpServletResponse response,
			ModelAndView model, HttpServletRequest request) {
		try {
			String deg = request.getParameter("deg").toLowerCase();
			String type = request.getParameter("type");
			List<DegreeMaster> alrDegree = genericBusiness.getDegrees();
			List<DegreeMaster> alrDegree2 = new ArrayList<DegreeMaster>();
			if (type.equals("ug")) {
				DegreeMaster degree = null;
				for (DegreeMaster degree1 : alrDegree) {
					if (degree1.getDegree().equalsIgnoreCase(deg)) {
						degree = new DegreeMaster();
						degree.setDno(degree1.getDno());
						degree.setDepartment(degree1.getDepartment()
								.toUpperCase());
						alrDegree2.add(degree);
					}
				}

				Set set = new HashSet(alrDegree2);
				alrDegree2.clear();
				alrDegree2.addAll(set);
				model = new ModelAndView("ug");
				model.addObject("deplist", alrDegree2);

			} else if (type.equals("pg")) {
				DegreeMaster degree = null;
				for (DegreeMaster degree1 : alrDegree) {
					if (degree1.getDegree().equalsIgnoreCase(deg)) {
						degree = new DegreeMaster();
						degree.setDno(degree1.getDno());
						degree.setDepartment(degree1.getDepartment()
								.toUpperCase());
						alrDegree2.add(degree);
					}
				}
				Set set = new HashSet(alrDegree2);
				alrDegree2.clear();
				alrDegree2.addAll(set);

				model = new ModelAndView("pg");
				model.addObject("deplist", alrDegree2);

			}
			return model;
		} catch (Exception e) {
			throw new CustomGenericException("" + e.hashCode(), e.getMessage());
		}
	}


	@ExceptionHandler(CustomGenericException.class)
	public ModelAndView handleCustomException(CustomGenericException ex) {
		ModelAndView model = new ModelAndView("generic_error");
		model.addObject("exception", ex);
		return model;

	}

	@ExceptionHandler(Exception.class)
	public ModelAndView handleAllException(Exception ex) {

		ModelAndView model = new ModelAndView("exception_error");
		return model;

	}
	
	

}
